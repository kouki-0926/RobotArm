import numpy as np
import csv


def dynamics(dt, filenumber, dof):
    with open("csv/simulation_"+str(filenumber)+".csv") as f:
        reader = csv.reader(f)
        l = [row for row in reader]
        q = np.array([[float(v) for v in row] for row in l])
    num = q.shape[0]
    dq = np.diff(q, axis=0, n=1)/dt
    ddq = np.diff(q, axis=0, n=2)/(dt**2)

    q = np.deg2rad(q[0:-2, :])
    dq = np.deg2rad(dq[0:-1, :])
    ddq = np.deg2rad(ddq)

    if(dof == 3):
        τ1 = -5.82076609134674e-11*np.sin(2*q[:,1]-2*q[:,2])*dq[:,0]*dq[:,2]-1419000.0*np.sin(2*q[:,1]+q[:,2])*dq[:,0]*dq[:,1]-709500.0*np.sin(2*q[:,1]+q[:,2])*dq[:,0]*dq[:,2]-302500.0*np.sin(2*q[:,1]+2*q[:,2])*dq[:,0]*dq[:,1]-302500.0*np.sin(2*q[:,1]+2*q[:,2])*dq[:,0]*dq[:,2]-3882900.0*np.sin(2*q[:,1])*dq[:,0]*dq[:,1]-709500.0*np.sin(q[:,2])*dq[:,0]*dq[:,2]-2.91038304567337e-11*np.cos(2*q[:,1]-2*q[:,2])*ddq[:,0]+709500.0*np.cos(2*q[:,1]+q[:,2])*ddq[:,0]+151250.0*np.cos(2*q[:,1]+2*q[:,2])*ddq[:,0]+1941450.0*np.cos(2*q[:,1])*ddq[:,0]+709500.0*np.cos(q[:,2])*ddq[:,0]+7092700.0*ddq[:,0]
        τ2 = -1.45519152283669e-11*np.sin(2*q[:,1]-2*q[:,2])*dq[:,0]**2+709500.0*np.sin(2*q[:,1]+q[:,2])*dq[:,0]**2+151250.0*np.sin(2*q[:,1]+2*q[:,2])*dq[:,0]**2+1941450.0*np.sin(2*q[:,1])*dq[:,0]**2-1419000.0*np.sin(q[:,2])*dq[:,1]*dq[:,2]-709500.0*np.sin(q[:,2])*dq[:,2]**2+53955000.0*np.cos(q[:,1]+q[:,2])+379647000.0*np.cos(q[:,1])+1419000.0*np.cos(q[:,2])*ddq[:,1]+709500.0*np.cos(q[:,2])*ddq[:,2]+34185400.0*ddq[:,1]+302500.0*ddq[:,2]
        τ3 = 1.45519152283669e-11*np.sin(2*q[:,1]-2*q[:,2])*dq[:,0]**2+354750.0*np.sin(2*q[:,1]+q[:,2])*dq[:,0]**2+151250.0*np.sin(2*q[:,1]+2*q[:,2])*dq[:,0]**2+354750.0*np.sin(q[:,2])*dq[:,0]**2+709500.0*np.sin(q[:,2])*dq[:,1]**2+53955000.0*np.cos(q[:,1]+q[:,2])+709500.0*np.cos(q[:,2])*ddq[:,1]+302500.0*ddq[:,1]+6302500.0*ddq[:,2]
    if(dof == 32):
        τ1 = -2.91038304567337e-11*np.sin(2*q[:,1]-2*q[:,2])*dq[:,0]*dq[:,2]-1419000.0*np.sin(2*q[:,1]+q[:,2])*dq[:,0]*dq[:,1]-709500.0*np.sin(2*q[:,1]+q[:,2])*dq[:,0]*dq[:,2]-302500.0*np.sin(2*q[:,1]+2*q[:,2])*dq[:,0]*dq[:,1]-302500.0*np.sin(2*q[:,1]+2*q[:,2])*dq[:,0]*dq[:,2]-4472268.75*np.sin(2*q[:,1])*dq[:,0]*dq[:,1]-709500.0*np.sin(q[:,2])*dq[:,0]*dq[:,2]-1.45519152283669e-11*np.cos(2*q[:,1]-2*q[:,2])*ddq[:,0]+709500.0*np.cos(2*q[:,1]+q[:,2])*ddq[:,0]+151250.0*np.cos(2*q[:,1]+2*q[:,2])*ddq[:,0]+2236134.375*np.cos(2*q[:,1])*ddq[:,0]+709500.0*np.cos(q[:,2])*ddq[:,0]+7387384.375*ddq[:,0]
        τ2 = -1.45519152283669e-11*np.sin(2*q[:,1]-2*q[:,2])*dq[:,0]**2+709500.0*np.sin(2*q[:,1]+q[:,2])*dq[:,0]**2+151250.0*np.sin(2*q[:,1]+2*q[:,2])*dq[:,0]**2+2236134.375*np.sin(2*q[:,1])*dq[:,0]**2-1419000.0*np.sin(q[:,2])*dq[:,1]*dq[:,2]-709500.0*np.sin(q[:,2])*dq[:,2]**2+53955000.0*np.cos(q[:,1]+q[:,2])+411284250.0*np.cos(q[:,1])+1419000.0*np.cos(q[:,2])*ddq[:,1]+709500.0*np.cos(q[:,2])*ddq[:,2]+34774768.75*ddq[:,1]+302500.0*ddq[:,2]
        τ3 = 1.45519152283669e-11*np.sin(2*q[:,1]-2*q[:,2])*dq[:,0]**2+354750.0*np.sin(2*q[:,1]+q[:,2])*dq[:,0]**2+151250.0*np.sin(2*q[:,1]+2*q[:,2])*dq[:,0]**2+354750.0*np.sin(q[:,2])*dq[:,0]**2+709500.0*np.sin(q[:,2])*dq[:,1]**2+53955000.0*np.cos(q[:,1]+q[:,2])+709500.0*np.cos(q[:,2])*ddq[:,1]+302500.0*ddq[:,1]+6302500.0*ddq[:,2]
    elif(dof == 6):
        τ1 = -7095000.0*np.sin(2*q[:,1]+q[:,2])*dq[:,0]*dq[:,1]-3547500.0*np.sin(2*q[:,1]+q[:,2])*dq[:,0]*dq[:,2]-2520833.33333333*np.sin(2*q[:,1]+2*q[:,2])*dq[:,0]*dq[:,1]-2520833.33333333*np.sin(2*q[:,1]+2*q[:,2])*dq[:,0]*dq[:,2]-7211100.0*np.sin(2*q[:,1])*dq[:,0]*dq[:,1]-3547500.0*np.sin(q[:,2])*dq[:,0]*dq[:,2]+3547500.0*np.cos(2*q[:,1]+q[:,2])*ddq[:,0]+1260416.66666667*np.cos(2*q[:,1]+2*q[:,2])*ddq[:,0]+3605550.0*np.cos(2*q[:,1])*ddq[:,0]+3547500.0*np.cos(q[:,2])*ddq[:,0]+9865966.66666667*ddq[:,0]
        τ2 = -2520833.33333333*np.sin(q[:,1]+q[:,2])*np.sin(q[:,1])*np.sin(q[:,2])*dq[:,0]**2+3547500.0*np.sin(q[:,1]+q[:,2])*np.cos(q[:,1])*dq[:,0]**2+3547500.0*np.sin(q[:,1])*np.cos(q[:,1]+q[:,2])*dq[:,0]**2+4865966.66666667*np.sin(2*q[:,1])*dq[:,0]**2+2520833.33333333*np.sin(q[:,2])*np.cos(q[:,1]+q[:,2])*np.cos(q[:,1])*dq[:,0]**2-7095000.0*np.sin(q[:,2])*dq[:,1]*dq[:,2]-3547500.0*np.sin(q[:,2])*dq[:,2]**2+269775000.0*np.cos(q[:,1]+q[:,2])+632745000.0*np.cos(q[:,1])+7095000.0*np.cos(q[:,2])*ddq[:,1]+3547500.0*np.cos(q[:,2])*ddq[:,2]+39731933.3333333*ddq[:,1]+2520833.33333333*ddq[:,2]
        τ3 = 1773750.0*np.sin(2*q[:,1]+q[:,2])*dq[:,0]**2+1260416.66666667*np.sin(2*q[:,1]+2*q[:,2])*dq[:,0]**2+1773750.0*np.sin(q[:,2])*dq[:,0]**2+3547500.0*np.sin(q[:,2])*dq[:,1]**2+269775000.0*np.cos(q[:,1]+q[:,2])+3547500.0*np.cos(q[:,2])*ddq[:,1]+2520833.33333333*ddq[:,1]+14520833.3333333*ddq[:,2]
    return np.array([τ1, τ2, τ3])


def dynamics_2(iTip1_list, num):
    iRip1_list = iTip1_list[:, 0:3, 0:3]
    iPip1_list = iTip1_list[:, 0:3, 3]
    iPip1x__list = np.array([[[0,               -iPip1_list[p, 2], iPip1_list[p, 1]],
                              [iPip1_list[p, 2], 0,               -iPip1_list[p, 0]],
                              [-iPip1_list[p, 1], iPip1_list[p, 0], 0]] for p in range(num-2)])
    Jip1i_T_list = np.array([np.block([[iRip1_list[p], np.zeros((3, 3))],
                                       [np.dot(iPip1x__list[p], iRip1_list[p]), iRip1_list[p]]]) for p in range(num-2)])
    return Jip1i_T_list